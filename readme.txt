Distribution Project Repository
This repository is designed to manage, process, and analyze intraday data for various financial instruments.
The project automates the fetching, processing, and statistical analysis of instrument data using Python scripts. 
Below is a detailed breakdown of the repository structure and its components.

*Repository Structure
1. Folders
   
  a. Intraday_data_files
  Description: Contains bundled intraday data files for 10 financial instruments fetched from Yahoo Finance.
    (As of December 03, 2024)
    Intraday_data_CL_2024-09-30_to_2024-12-02.csv 
    Intraday_data_DJI_2024-09-30_to_2024-11-29.csv 
    Intraday_data_DXY_2024-09-30_to_2024-12-02.csv 
    Intraday_data_GC_2024-09-30_to_2024-12-02.csv 
    Intraday_data_GSPC_2024-09-30_to_2024-11-29.csv 
    Intraday_data_NQ_2024-09-30_to_2024-12-02.csv 
    Intraday_data_ZB_2024-10-11_to_2024-12-02.csv 
    Intraday_data_ZF_2024-10-11_to_2024-12-02.csv 
    Intraday_data_ZN_2024-09-30_to_2024-12-02.csv
    Intraday_data_ZT_2024-10-11_to_2024-12-02.csv
  Purpose: Updated daily by "periodic_runner_main.py" via GitHub actions to reflect the latest events and data for all instruments.

  b. Daily_backup_files
  Description: Stores raw data files fetched from Yahoo Finance before merging and further processing.
  Usage: Nothing, just for backup. Can be deleted without any problem
  
  c. Stats_and_Plots_Folder:
  Description: Stores descriptive statistics and graphical plots for the instruments as generated by the code.
  Usage: Automatically populated after running scripts like returns_main.py.
  
2. Files
   
 2.1. Main Files: To be directly run by user. (Skip other files)
  a. periodic_runner_main.py:
  Purpose: Automation script that updates 1-minute intraday data for all instruments in the repository.
  Functionality: Automatically fetches and merges data at regular intervals.
  Output: Merges data in Folder: "Intraday_data_files" daily at fixed time. (Refer main.yml in workflow)

  b. returns_main.py:
  Purpose: Processes instrument files like ZN_1m.csv and event files like "all_events_no_tz.xlsx" to generate statistics and plots.
  Output: Stores results in the Stats_and_Plots_Folder.


 2.2. Helper Scripts: Main Scripts(2.1) depend on these files for automation and analysis.
  a. preprocessing.py,  intradaydata.py, returns.py, events.py
  Purpose: Contains Classes to run Files: "periodic_runner_main.py" and "returns_main.py"
  
  b. all_events_no_tz.xlsx
  Purpose: Consolidated events data in Excel format.
 

 2.3  Other Files:
  2.3.1. CSV Input Data Files:
     Files like ZN_15m.csv are input data files.(ZN_15m means ZN intraday data at 15m interval),
    
  2.3.2 CSV Intermediate/Processed Files:
     a. Files like ZN_1m_filtered_events_tagged.csv->(ZN data, 1m interval, filtered for last two weeks of December, Events tagged).
     b. Files like all_events_combined_target_tz.csv->(Events data, combined for all years, converted from IST to EST)
     created during the data processing pipeline.

*Automate Data Updates:
Run periodic_runner_main.py to automatically update intraday 1-minute data for all instruments.

*Generate Statistics and Plots:
Use returns_main.py to analyze instrument data (e.g., ZN_1m.csv) and create descriptive statistics and visualizations to be stored in Folder: "stats_and_plots"

*Notes
All .csv files(currently) are created dynamically during the data processing pipeline.
